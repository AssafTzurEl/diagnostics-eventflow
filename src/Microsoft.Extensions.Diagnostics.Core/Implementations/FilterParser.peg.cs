// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "FilterParser.peg"
           Microsoft.Extensions.Diagnostics
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 5 "FilterParser.peg"
       System.Linq
        #line default
        ;
    using
        #line 6 "FilterParser.peg"
       Microsoft.Extensions.Diagnostics.FilterEvaluators
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="FilterParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    #line 3 "FilterParser.peg"
               internal
    #line default
    partial class
    #line 2 "FilterParser.peg"
           FilterParser
    #line default
    {
        private Dictionary<CacheKey, object> storage;

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="FilterParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="FilterEvaluator" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public FilterEvaluator Parse(string subject, string fileName = null)
        {
            try
            {
                this.storage = new Dictionary<CacheKey, object>();
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.filter(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse 'filter'.");
                }
                return result.Value;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<
            #line 8 "FilterParser.peg"
        FilterEvaluator
            #line default
            > filter(ref Cursor cursor)
        {
            IParseResult<FilterEvaluator> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this._(ref cursor);
            if (r1 != null)
            {
                IParseResult<FilterEvaluator> r2 = null;
                var expStart = cursor;
                r2 = this.orExp(ref cursor);
                var expEnd = cursor;
                var exp = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.eof(ref cursor);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<FilterEvaluator>(startCursor0, ref cursor, state =>
                                #line 9 "FilterParser.peg"
                       exp
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 11 "FilterParser.peg"
       FilterEvaluator
            #line default
            > orExp(ref Cursor cursor)
        {
            IParseResult<FilterEvaluator> r0 = null;
            var storageKey = new CacheKey("orExp", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<FilterEvaluator>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            this.storage[storageKey] = null;
            var startCursor0 = cursor;
            while (true)
            {
                IParseResult<FilterEvaluator> r1 = null;
                if (r1 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<FilterEvaluator> r2 = null;
                    var leftStart = cursor;
                    r2 = this.orExp(ref cursor);
                    var leftEnd = cursor;
                    var left = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this._(ref cursor);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.ParseLiteral(ref cursor, "||");
                            if (r4 != null)
                            {
                                IParseResult<IList<string>> r5 = null;
                                r5 = this._(ref cursor);
                                if (r5 != null)
                                {
                                    IParseResult<FilterEvaluator> r6 = null;
                                    var rightStart = cursor;
                                    r6 = this.andExp(ref cursor);
                                    var rightEnd = cursor;
                                    var right = ValueOrDefault(r6);
                                    if (r6 != null)
                                    {
                                        r1 = this.ReturnHelper<FilterEvaluator>(startCursor1, ref cursor, state =>
                                            #line 12 "FilterParser.peg"
                                       new AlternativeEvaluator(left, right)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor1;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                if (r1 == null)
                {
                    r1 = this.andExp(ref cursor);
                }
                if (r1 == null || (r0 != null && r0.EndCursor.Location >= r1.EndCursor.Location))
                {
                    break;
                }
                startCursor0 = startCursor0.Touch();
                this.storage[new CacheKey("orExp", startCursor0.StateKey, startCursor0.Location)] = this.storage[storageKey] = r0 = r1;
                cursor = startCursor0;
            }
            if (r0 != null)
            {
                cursor = r0.EndCursor;
            }
            return r0;
        }

        private IParseResult<
            #line 15 "FilterParser.peg"
        FilterEvaluator
            #line default
            > andExp(ref Cursor cursor)
        {
            IParseResult<FilterEvaluator> r0 = null;
            var storageKey = new CacheKey("andExp", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<FilterEvaluator>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            this.storage[storageKey] = null;
            var startCursor0 = cursor;
            while (true)
            {
                IParseResult<FilterEvaluator> r1 = null;
                if (r1 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<FilterEvaluator> r2 = null;
                    var leftStart = cursor;
                    r2 = this.andExp(ref cursor);
                    var leftEnd = cursor;
                    var left = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this._(ref cursor);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.ParseLiteral(ref cursor, "&&");
                            if (r4 != null)
                            {
                                IParseResult<IList<string>> r5 = null;
                                r5 = this._(ref cursor);
                                if (r5 != null)
                                {
                                    IParseResult<FilterEvaluator> r6 = null;
                                    var rightStart = cursor;
                                    r6 = this.primaryExp(ref cursor);
                                    var rightEnd = cursor;
                                    var right = ValueOrDefault(r6);
                                    if (r6 != null)
                                    {
                                        r1 = this.ReturnHelper<FilterEvaluator>(startCursor1, ref cursor, state =>
                                            #line 16 "FilterParser.peg"
                                            new ConjunctionEvaluator(left, right)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor1;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                if (r1 == null)
                {
                    r1 = this.primaryExp(ref cursor);
                }
                if (r1 == null || (r0 != null && r0.EndCursor.Location >= r1.EndCursor.Location))
                {
                    break;
                }
                startCursor0 = startCursor0.Touch();
                this.storage[new CacheKey("andExp", startCursor0.StateKey, startCursor0.Location)] = this.storage[storageKey] = r0 = r1;
                cursor = startCursor0;
            }
            if (r0 != null)
            {
                cursor = r0.EndCursor;
            }
            return r0;
        }

        private IParseResult<
            #line 19 "FilterParser.peg"
            FilterEvaluator
            #line default
            > primaryExp(ref Cursor cursor)
        {
            IParseResult<FilterEvaluator> r0 = null;
            if (r0 == null)
            {
                r0 = this.basicExp(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "(");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<FilterEvaluator> r3 = null;
                        var expStart = cursor;
                        r3 = this.orExp(ref cursor);
                        var expEnd = cursor;
                        var exp = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this._(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<string> r5 = null;
                                r5 = this.ParseLiteral(ref cursor, ")");
                                if (r5 != null)
                                {
                                    r0 = this.ReturnHelper<FilterEvaluator>(startCursor0, ref cursor, state =>
                                        #line 21 "FilterParser.peg"
                            exp
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r6 = null;
                r6 = this.ParseLiteral(ref cursor, "!(");
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    r7 = this._(ref cursor);
                    if (r7 != null)
                    {
                        IParseResult<FilterEvaluator> r8 = null;
                        var expStart = cursor;
                        r8 = this.orExp(ref cursor);
                        var expEnd = cursor;
                        var exp = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this._(ref cursor);
                            if (r9 != null)
                            {
                                IParseResult<string> r10 = null;
                                r10 = this.ParseLiteral(ref cursor, ")");
                                if (r10 != null)
                                {
                                    r0 = this.ReturnHelper<FilterEvaluator>(startCursor1, ref cursor, state =>
                                        #line 22 "FilterParser.peg"
                             new NegationEvaluator(exp)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 24 "FilterParser.peg"
          FilterEvaluator
            #line default
            > basicExp(ref Cursor cursor)
        {
            IParseResult<FilterEvaluator> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var pStart = cursor;
            r1 = this.property(ref cursor);
            var pEnd = cursor;
            var p = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var oStart = cursor;
                    r3 = this.@operator(ref cursor);
                    var oEnd = cursor;
                    var o = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this._(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var vStart = cursor;
                            if (r5 == null)
                            {
                                r5 = this.value(ref cursor);
                            }
                            if (r5 == null)
                            {
                                r5 = this.quotedText(ref cursor);
                            }
                            var vEnd = cursor;
                            var v = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<FilterEvaluator>(startCursor0, ref cursor, state =>
                                    #line 25 "FilterParser.peg"
                                                       EventPropertyExpressionEvaluatorFactory.CreateEvaluator(p, o, v)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> property(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            if (r1 == null)
            {
                r1 = this.ParseClass(ref cursor, "AZaz");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "_");
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    if (r3 == null)
                    {
                        r3 = this.letterDigit(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, "_");
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, ".");
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> @operator(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, ">=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "<=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, ">");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "<");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "==");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "!=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "~=");
            }
            return r0;
        }

        private IParseResult<string> value(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            if (r1 == null)
            {
                r1 = this.letterDigit(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "-");
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    if (r3 == null)
                    {
                        r3 = this.letterDigit(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, "-");
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, ":");
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, ".");
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> quotedText(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\"");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var cStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, "\\\"");
                    }
                    if (r3 == null)
                    {
                        var startCursor2 = cursor;
                        IParseResult<string> r4 = null;
                        var startCursor3 = cursor;
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "\"");
                        if (r5 == null)
                        {
                            r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        if (r4 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseAny(ref cursor);
                            if (r6 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var cEnd = cursor;
                var c = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "\"");
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 46 "FilterParser.peg"
   {
      var unescapedList = c.Select(str => str == "\\\"" ? "\"" : str);
      return String.Concat(unescapedList);
  }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> letterDigit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZaz09");
            return r0;
        }

        private IParseResult<IList<string>> _(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "  \t\t\r\r\n\n");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<string> eof(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
